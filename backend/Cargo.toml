[package]
name = "chaos_danmu_tool"
version = "0.10.0"
description = "A tool for process/view Danmu on bilibili"
authors = ["Golden_Water"]
license = "AGPL-3.0-only"
repository = "https://github.com/BillGoldenWater/ChaosDanmuTool.git"
default-run = "chaos_danmu_tool"
edition = "2021"
rust-version = "1.57"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1.3.0", features = [] }

#[target.'cfg(target_os = "windows")'.build-dependencies]
#embed-resource = "1.8.0"

[dependencies]
chaos_danmu_tool_share = { path = "../share" }
static_object = { git = "https://github.com/BillGoldenWater/StaticObject.git" }
# live template: tss
# #[derive(serde::Serialize, serde::Deserialize, PartialEq, Debug, Clone)]
# #[serde(rename_all = "camelCase")]
# pub struct $NAME$ {
#   $END$
# }
#
# live template: atss
# #[derive(serde::Serialize, serde::Deserialize, PartialEq, Debug, Clone)]
# #[serde(rename_all = "camelCase")]
serde_json = "1.0.96"
serde = { version = "1.0.163", features = ["derive"] }
# live template: sddfc (serde default define & function - config)
#
# #[serde(default = "$fieldName$_default")]
# #[serde(skip_serializing_if = "$fieldName$_skip_if")]
# // region $fieldName$
# fn $fieldName$_default() -> $typeName$ {
#   $defaultValue$
# }
#
# fn $fieldName$_skip_if(value: &$typeName$) -> bool {
#   *value == $fieldName$_default() && *ALLOW_CONFIG_SKIP_IF.read().unwrap()
# }
# // endregion
#
# live template: seo (serde empty object)
# serde_json::from_str("{}").unwrap()
tauri = { version = "1.3.0", features = ["macos-private-api", "updater", "window-start-dragging"] }
window-vibrancy = "0.3.2"
window-shadows = "0.2.1"
raw-window-handle = "=0.5.0"
futures-util = "0.3.28"
tokio = { version = "1.28.1", features = ["full"] }
tokio-tungstenite = { version = "0.18.0", features = ["native-tls"] }
hyper = { version = "0.14.26", features = ["http1", "http2", "server"] }
reqwest = { version = "0.11.17", features = ["blocking", "native-tls"] }
bytes = "1.4.0"
uuid = { version = "1.3.2", features = ["v4", "fast-rng", "macro-diagnostics"] }
rfd = { version = "=0.10.0", features = ["common-controls-v6"] }
chrono = "0.4.24"
netstat2 = "0.9.1"
get-port = "4.0.0"
sysinfo = "0.29.0"
async-recursion = "1.0.4"
sqlx = { version = "0.6.3", features = ["runtime-tokio-native-tls", "sqlite"] }
rand = "0.8.5"
backtrace = "0.3.67"
thiserror = "1.0.40"
log = { version = "0.4.17", features = ["max_level_debug", "release_max_level_debug"] }
fern = { version = "0.6.2", features = ["colored"] }
argh = "0.1.10"
os_type = "2.6.0"
toml = "0.7.3"
once_cell = "1.17.1"
const_format = "0.2.30"
itertools = "0.10.5"

[target.'cfg(target_os = "windows")'.dependencies]
windows = { version = "0.48.0", features = ["Win32_Foundation", "Win32_System_Console"] }

[target.'cfg(target_os = "macos")'.dependencies]
libc = "0.2.144"
objc2 = "0.3.0-beta.5"
icrate = { version = "0.0.2", features = ["Foundation", "Foundation_NSString", "Foundation_NSProcessInfo", "AppKit", "AppKit_NSWindow", "AppKit_NSButton"] }

[features]
# region tauri
# by default Tauri runs in production mode
# when `tauri dev` runs it is executed with `cargo run --no-default-features` if `devPath` is an URL
default = ["custom-protocol"]
# this feature is used used for production builds where `devPath` points to the filesystem
# DO NOT remove this
custom-protocol = ["tauri/custom-protocol"]
# endregion

lock_debug = []

#[patch.crates-io]
#tauri = { git = "https://github.com/BillGoldenWater/tauri.git", rev = "75a0c79dea39e3e8372097152a0fa82cf6493686" }
#tao = { git = "https://github.com/BillGoldenWater/tao.git" }
